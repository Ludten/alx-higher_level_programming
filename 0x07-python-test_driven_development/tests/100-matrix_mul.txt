===============================
 How to Use 100-matrix_mul.py
===============================

This library show usage of ``matrix_mul()``.

Lists
=====

``matrix_mul()`` returns the product of its arguments.

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> a = [[1, 2, 3], [4, 5, 6]]
    >>> b = [[7, 8], [9, 10], [11, 12]]
    >>> matrix_mul(a, b)
    [[58, 64], [139, 154]]

    >>> a = [[3, 4, 2]]
    >>> b = [[13, 9, 7, 15], [8, 7, 4, 6], [6, 4, 0, 3]]
    >>> matrix_mul(a, b)
    [[83, 63, 37, 75]]

    >>> a = [[1, 2, 3]]
    >>> b = [[4], [5], [6]]
    >>> matrix_mul(a, b)
    [[32]]

    >>> a = [[4], [5], [6]]
    >>> b = [[1, 2, 3]]
    >>> matrix_mul(a, b)
    [[4, 8, 12], [5, 10, 15], [6, 12, 18]]

Non-Lists
=========

``matrix_mul()`` is only designed to accept lists
and list of lists, if one of the arguments is an
integer, a string, a list of any other data type
or a tuple, it should raise a TypeError

::

    >>> a = 1
    >>> b = [[7, 8], [9, 10], [11, 12]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    TypeError: m_a must be a list

    >>> a = (1, 2, 3)
    >>> b = [[7, 8], [9, 10], [11, 12]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    TypeError: m_a must be a list

    >>> a = [1, (1, 2, 3)]
    >>> b = [[7, 8], [9, 10], [11, 12]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    TypeError: m_a must be a list of lists


``matrix_mul()`` is only designed to accept non
empty lists and list of lists, if one of the
arguments is empty, it should raise a ValueError

::

    >>> a = []
    >>> b = [[7, 8], [9, 10], [11, 12]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    ValueError: m_a can't be empty

    >>> a = [[7, 8], [9, 10], [11, 12]]
    >>> b = [[]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    ValueError: m_b can't be empty

``matrix_mul()`` is only designed to accept lists
and list of lists with only integer values, if
one of the values is not an integer or float, it
should raise a TypeError

::

    >>> a = [[7, 'a'], [9, 10]]
    >>> b = [[7, 8], [9, 10]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    TypeError: m_a should contain only integers or floats

``matrix_mul()`` is only designed to accept lists
and list of lists with equal rows, if one of the
row is a different length, it should raise a TypeError

::

    >>> a = [[7, 8], [9, 10, 11]]
    >>> b = [[7, 8], [9, 10]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    TypeError: each row of m_a must be of the same size

    >>> a = [[7, 8, 9], [9, 10, 11]]
    >>> b = [[7, 8, 9], [9, 10, 11]]
    >>> matrix_mul(a, b)
    Traceback (most recent call last):
      ...
    ValueError: m_a and m_b can't be multiplied
